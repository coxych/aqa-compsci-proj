<%- include('partials/header'); -%>

<header>
  <h2>HERE YOU CAN MANAGE YOUR EXPENSES</h2>
</header>
<h2>Your current budget = <%= user.budget.toFixed(2) %> £</h2> <!--display budget with 2 decimal places using EJS-->
<h3>You can add your expenses here</h3>
<div class="row-layout">
  <br>
  <form action="/expenses" method="post"> 
    <label for="amount">Amount</label>
    <input type="number" step="0.01" name="amount" required>
    <label for="date">Date</label>
    <!-- here we use the new Date().toISOString().split('T')[0] to get the current date in the format that the input type date requires -->
    <input type="date" name="date" value="<%= new Date().toISOString().split('T')[0] %>" required>
    <label for="category">Category</label>
    <input type="text" name="category" required>
    <label for="description">Description (optional)</label>
    <input type="text" name="description" >
    <button class="btn" type="submit">Add</button>
  </form>

  <script>
    const form = document.querySelector('form'); //grab the form
    form.addEventListener('submit', async (e) => {
      e.preventDefault(); 
      const amount = form.amount.value; //get the amount value
      const date = form.date.value; //get the date value
      const category = form.category.value; //get the category
      const description = form.description.value; //get the description
      try {
        const res = await fetch('/expenses', { //sending post req to server
          method: 'POST',
          body: JSON.stringify({ amount, date, category, description }),
          headers: { 'Content-Type': 'application/json' }
        });
        const data = await res.json();
        if (data) { // if there is a response refresh expenses
          location.assign('/expenses');
        }
      } catch (err) {
        console.log(err.message);
      }
    });
  </script>
  <div class="scroll-r">
    <h2>Your 6 latest expenses:</h2>
    <% for (let i = 0; i < 6 && i < user.expenses.length; i++) { %>
    <li>
      <p>Amount: <%= user.expenses[user.expenses.length - 1 - i].amount %> £</p>
      <p>Date: <%= user.expenses[user.expenses.length - 1 - i].date %></p>
      <p>Category: <%= user.expenses[user.expenses.length - 1 - i].category %></p>
      <% if (user.expenses[user.expenses.length - 1 - i].description){ %>
        <p>Description: <%= user.expenses[user.expenses.length - 1 - i].description %></p>
      <% } else {%>
        <p></p>
      <% } %>
    </li>
    <% } %>
  </div>
</div>
<h2>ADD YOUR SUBSCRIPTIONS OR USUAL EXPENSES HERE</h2>
<br>
<div class="row-layout">
<form action="/addsubs" method="post">
  <label for="amount">Amount</label>
  <input type="number" step="0.01" name="amount" required>
  <label for="howoften">How often</label>
  <select name="howoften" id="howoften"> <!-- select bar which allows to choose frequency of payment -->
    <option value="daily">Daily</option>
    <option value="weekly">Weekly</option>
    <option value="monthly">Monthly</option>
  </select>
  <label for="date">Next date of payment</label>
  <!-- again conversion of current data into the required format -->
  <input type="date" name="date" value="<%= new Date().toISOString().split('T')[0] %>" required>
  <label for="category">Category</label>
  <input type="text" name="category" required>
  <label for="description">Description (optional)</label>
  <input type="text" name="description" >
  <button class="btn" type="submit">Add</button>
</form>
<script>
  const form2 = document.querySelector('form');
  form2.addEventListener('submit', async (e) => { //adds submit button listener to form
    e.preventDefault(); //default action prevention as it is reloading the page
    //getting values from form
    const amount = form2.amount.value;
    const date = form2.date.value;
    const howoften = form2.howoften.value;
    const category = form2.category.value;
    const description = form2.description.value;
    try {
      const res = await fetch('/addsubs', { //post req sending to server
        method: 'POST',
        body: JSON.stringify({ amount, date, category, description, }),
        headers: { 'Content-Type': 'application/json' }
      });
    } catch (err) {
      console.log(err.message);
    }
  });
</script>
<div class="scroll-r">
  <h2>All you subscriptions and constant expenses</h2>
  <% user.subs.reverse().forEach((sub) => { %> <!-- reverse as subs were in wrong order when displayed -->
  <div class="row-layout">
    <li>
      <!-- displaying of data from sub object in subs array -->
      <p>Amount: <%= sub.amount %> £</p>
      <p>Next date: <%= sub.date %></p>
      <p>Category: <%= sub.category %></p>
      <p>How Often: <%= sub.howoften %></p>
      <% if (sub.description){ %>
        <p>Description: <%= sub.description %></p>
      <% } else {%>
        <p></p>
      <% } %>
      <!-- delete button which contains id and sub id in itself for further delete req -->
      <button class="btn delete-btn" data-id="<%= sub.id%>" data-usid="<%= user._id %>">DELETE</button>
    </li>
  </div>
  <% }); %>
</div>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.delete-btn').forEach(button => { //for each as there might be several subs
      button.addEventListener('click', function() { //listener to delet button
        //extraction of data from delete button (user id and sub id)
        const subId = this.getAttribute('data-id');
        const userId = this.getAttribute('data-usid');
        try {
          fetch(`/user/${userId}/sub/${subId}`, { //delete req sending 
            //this req contains data in itself as it is delete req
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
            }
          }).then(() => {
            location.reload(); //reload of bage after req is sent
          });
        } catch {
          console.log('failed to delete sub');
        }
      });
    });
  });
</script>
</div>
<%- include('partials/footer'); -%>
